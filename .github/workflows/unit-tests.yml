name: Unit Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Test Project
        run: dotnet build tests/SharpGraph.Tests/SharpGraph.Tests.csproj --configuration Debug

      - name: Run Tests
        run: dotnet test tests/SharpGraph.Tests/SharpGraph.Tests.csproj --configuration Debug --no-build --verbosity normal --logger "trx;LogFileName=../../test-results.trx" --collect:"XPlat Code Coverage" --logger "console;verbosity=detailed"

      - name: Install Report Generator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate Coverage Report
        run: |
          reportgenerator -reports:"**/coverage.cobertura.xml" -targetdir:"coverage-report" -reporttypes:"HtmlInline;Markdown"

      - name: Generate Test Report
        if: always()
        shell: pwsh
        run: |
          $trxFile = Get-ChildItem -Path . -Filter "test-results.trx" -Recurse | Select-Object -First 1
          Write-Host "Looking for TRX file..."
          
          if ($null -ne $trxFile) {
            Write-Host "TRX File found: $($trxFile.FullName)"
            [xml]$trx = Get-Content $trxFile.FullName
            $passed = [int]$trx.TestRun.ResultSummary.Counters.passed
            $failed = [int]$trx.TestRun.ResultSummary.Counters.failed
            $total = [int]$trx.TestRun.ResultSummary.Counters.total
            $duration = $trx.TestRun.Times.duration
            
            Write-Host "Tests - Total: $total, Passed: $passed, Failed: $failed"
            
            New-Item -ItemType Directory -Path "docs" -Force | Out-Null
            
            $status = if ($failed -eq 0) { "✅ **All tests passing**" } else { "❌ **Tests failed**" }
            $runDate = Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC'
            $repoUrl = "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            
            $report = "# Unit Test Report`n"
            $report += "`n"
            $report += "**Run Date**: $runDate`n"
            $report += "**Branch**: ${{ github.ref_name }}`n"
            $report += "**Commit**: ${{ github.sha }}`n"
            $report += "`n"
            $report += "## Summary`n"
            $report += "`n"
            $report += "| Metric | Value |`n"
            $report += "|--------|-------|`n"
            $report += "| Total Tests | $total |`n"
            $report += "| ✅ Passed | $passed |`n"
            $report += "| ❌ Failed | $failed |`n"
            $report += "| ⏱️ Duration | $duration |`n"
            $report += "`n"
            $report += "## Status`n"
            $report += "`n"
            $report += "$status`n"
            $report += "`n"
            $report += "## Test Categories`n"
            $report += "`n"
            $report += "- Lexer Tests - GraphQL tokenization and parsing`n"
            $report += "- Filtering Tests - Query filtering, sorting, pagination`n"
            $report += "- Storage Tests - Data persistence and indexing`n"
            $report += "- Index Tests - BTree and Hash index operations`n"
            $report += "- Mutation Tests - GraphQL mutation handling`n"
            $report += "- Parsing Tests - GraphQL schema and query parsing`n"
            $report += "`n"
            
            # Check if coverage report exists
            $coverageMd = Get-ChildItem -Path "coverage-report" -Filter "Summary.md" -Recurse | Select-Object -First 1
            if ($null -ne $coverageMd) {
              $report += "## Code Coverage`n"
              $report += "`n"
              $report += "[View Coverage Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts)`n"
              $report += "`n"
            }
            
            $report += "---`n"
            $report += "`n"
            $report += "[View Full Test Results]($repoUrl)`n"
            
            $report | Out-File -FilePath "docs/unit-test-report.md" -Encoding UTF8 -Force
            
            Write-Host "Report saved to docs/unit-test-report.md"
            Write-Host "File exists: $(Test-Path 'docs/unit-test-report.md')"
          } else {
            Write-Host "ERROR: TRX file not found!"
            Get-ChildItem -Path . -Recurse -Filter "*.trx" | ForEach-Object { Write-Host $_.FullName }
          }

      - name: Commit Test Report
        if: always()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/unit-test-report.md
          git commit -m "docs: update unit test report" || true
          git push || true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: '**/test-results.trx'
          retention-days: 30

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report
          path: coverage-report/
          retention-days: 30

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-report
          path: docs/unit-test-report.md
          retention-days: 30
