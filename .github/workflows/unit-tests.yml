name: Unit Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  pull-requests: write

jobs:
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build Test Project
        run: dotnet build tests/SharpGraph.Tests/SharpGraph.Tests.csproj --configuration Debug

      - name: Run Tests
        run: dotnet test tests/SharpGraph.Tests/SharpGraph.Tests.csproj --configuration Debug --no-build --verbosity normal --logger "trx;LogFileName=test-results.trx" --logger "console;verbosity=detailed"

      - name: Find Coverage Files
        shell: pwsh
        run: |
          Write-Host "Searching for test result files..."
          Get-ChildItem -Path . -Filter "test-results.trx" -Recurse | ForEach-Object { Write-Host "Found TRX: $($_.FullName)" }

      - name: Install Report Generator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Generate Test Report
        if: always()
        shell: pwsh
        run: |
          $trxFile = Get-ChildItem -Path . -Filter "test-results.trx" -Recurse | Select-Object -First 1
          
          if ($null -ne $trxFile) {
            Write-Host "TRX File found: $($trxFile.FullName)"
            [xml]$trx = Get-Content $trxFile.FullName
            
            # Extract summary
            $passed = [int]$trx.TestRun.ResultSummary.Counters.passed
            $failed = [int]$trx.TestRun.ResultSummary.Counters.failed
            $total = [int]$trx.TestRun.ResultSummary.Counters.total
            $duration = $trx.TestRun.Times.duration
            $runDate = Get-Date -Format 'yyyy-MM-dd HH:mm:ss UTC'
            
            Write-Host "Tests - Total: $total, Passed: $passed, Failed: $failed"
            
            New-Item -ItemType Directory -Path "docs" -Force | Out-Null
            
            # Build comprehensive report
            $report = "# Unit Test Report`n`n"
            $report += "**Run Date**: $runDate`n"
            $report += "**Branch**: ${{ github.ref_name }}`n"
            $report += "**Commit**: ${{ github.sha }}`n`n"
            
            # Summary section
            $report += "## Summary`n`n"
            $report += "| Metric | Value |`n"
            $report += "|--------|-------|`n"
            $report += "| Total Tests | $total |`n"
            $report += "| Passed | $passed |`n"
            $report += "| Failed | $failed |`n"
            $report += "| Duration | $duration |`n"
            $report += "| Pass Rate | $(if ($total -gt 0) { ([math]::Round(($passed/$total)*100, 2)) } else { 0 })% |`n`n"
            
            # Status
            $status = if ($failed -eq 0) { "**Status**: ✅ All tests passing" } else { "**Status**: ❌ Tests failed" }
            $report += "$status`n`n"
            
            # Parse all tests by category
            $categories = @{}
            if ($null -ne $trx.TestRun.Results) {
              $trx.TestRun.Results.UnitTestResult | ForEach-Object {
                $testName = $_.testName
                $outcome = $_.outcome
                $duration = $_.duration
                
                # Extract category from test name
                $parts = $testName -split '\.'
                if ($parts.Count -gt 2) {
                  $category = $parts[-2]
                } else {
                  $category = "Other"
                }
                
                if (-not $categories.ContainsKey($category)) {
                  $categories[$category] = @{ Passed = 0; Failed = 0; Tests = @() }
                }
                
                if ($outcome -eq "Passed") {
                  $categories[$category].Passed++
                } else {
                  $categories[$category].Failed++
                }
                
                $categories[$category].Tests += @{
                  Name = $testName
                  Outcome = $outcome
                  Duration = $duration
                }
              }
            }
            
            # Write test results by category
            if ($categories.Count -gt 0) {
              $report += "## Test Results by Category`n`n"
              
              foreach ($cat in ($categories.Keys | Sort-Object)) {
                $data = $categories[$cat]
                $total_cat = $data.Passed + $data.Failed
                $report += "### $cat`n`n"
                $report += "**Status**: $($data.Passed)/$total_cat passed`n`n"
                
                # List failed tests first
                $failedTests = $data.Tests | Where-Object { $_.Outcome -ne "Passed" }
                if ($failedTests.Count -gt 0) {
                  $report += "#### Failed Tests`n`n"
                  $failedTests | ForEach-Object {
                    $report += "- ❌ $($_.Name)`n"
                    $report += "  - Duration: $($_.Duration)`n"
                  }
                  $report += "`n"
                }
                
                # Summary for passed tests
                $passedCount = ($data.Tests | Where-Object { $_.Outcome -eq "Passed" }).Count
                if ($passedCount -gt 0) {
                  $report += "- ✅ $passedCount tests passed`n"
                }
                $report += "`n"
              }
            }
            
            # Footer
            $report += "---`n`n"
            $report += "[View Full Test Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`n"
            
            $report | Out-File -FilePath "docs/unit-test-report.md" -Encoding UTF8 -Force
            
            Write-Host "Report saved to docs/unit-test-report.md"
            Write-Host "File size: $((Get-Item 'docs/unit-test-report.md').Length) bytes"
          } else {
            Write-Host "ERROR: TRX file not found!"
          }

      - name: Commit Test Report
        if: always()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/unit-test-report.md
          git commit -m "docs: update unit test report" || true
          git push || true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: '**/test-results.trx'
          retention-days: 30

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-report
          path: docs/unit-test-report.md
          retention-days: 30
